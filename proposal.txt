CSE 522--Final Project Proposal

Robert Miller & Cameron Whipple


Proposal:

We will create a set of tools for examining running processes, allowing users to take snaphots of
the operating system's view of process state without interrupting the process itself. This will be
done by allowing users to run a simple control process in userspace, which will in turn pass
commands via the virtual file system to a kernel module. Inside this module, we will interpret the
provided command to identify a target process by it's pid, recovering a copy of its task struct and
all memory (in registers, on the stack, or on the heap) owned by that process. Once we've acquired
consistent copies of all of this information (using any and all relevant locking structures within
the kernel to ensure the safety and validity of the data accessed), we will dump whatever
information was requested into one or more files.


Purpose:

This utility could serve many purposes across the realms of debugging, reverse engineering, and
security research. By presenting a cohesive view of the running process--including not only access
to the internal state of its memory pages but also to the operating system's view of that process--
developers would be granted near total access to the way that a process was executing at a given
moment in time. Additionally, because the same process could be snapshotted multiple times in
succession, developers could track the way that certain logic results in changes in (for instance)
the task struct, perhaps to verify that system calls or other logic which touches the kernel to
change the way that the process is handled are indeed executing as planned.


Kernel Modifications:

The kernel itself will require no modification; we will be building out two components to work in
conjunction with any version of the Linux kernel: a kernel module (containing the code for accessing
and storing the contents of the task structs and any related fields) and a userspace command and
control application which will send (and possibly receive) coded signals to/from the module that we
write.


Test Cases:
  
  Snapshot a process to observe its task struct and memory
  Snapshot the same process multiple times
    Ensure that changes can be observed
  Attempt to snapshot a process which doesn't exist/is unavailable


Schedule:

  Week 1:
    Dump task struct info
      Acquire relevant locks
      Get to the raw information
      Dump raw bytes to a file

  Week 2:
    Interpret task struct
      Format the output for human-readability
      Provide some analysis of struct contents
      Follow pointers (when relevant) to get more data

  Week 3:
    Control/Testing
      Build out and test the command and control process
      Tie all of the components together
      Ensure that the sequence works from start to finish